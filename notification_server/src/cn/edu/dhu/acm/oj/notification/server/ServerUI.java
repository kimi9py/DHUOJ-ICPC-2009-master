/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cn.edu.dhu.acm.oj.notification.server;

import cn.edu.dhu.acm.oj.notification.server.thread.RunReceive;
import cn.edu.dhu.acm.oj.notification.server.thread.RunSend;
import cn.edu.dhu.acm.oj.notification.server.bean.ClientBean;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author wujy
 */
public class ServerUI extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public ServerUI() {
        initComponents();
        loadClients();
    }

    private void loadClients() {
        listClient.clear();
        mapContest.clear();
        modelStatus.clear();
        mapClientIP.clear();
        
        try {
            Scanner scan = new Scanner(new FileInputStream(new File("client.ini")));
            String line;
            while (scan.hasNextLine()) {
                line = scan.nextLine();
                if (!line.startsWith("#")) {
                    String arr[] = line.split(",");  // UserID,Password,ContestID,IP
                    if (arr.length == 4) {
                        ClientBean client = new ClientBean();
                        client.setUserID(arr[0]);
                        client.setPassword(arr[1]);
                        client.setContestID(Integer.parseInt(arr[2]));
                        mapContest.put(arr[2], 0);
                        client.setIP(arr[3]);
                        listClient.add(client);
                        modelStatus.add(Boolean.FALSE);
                        modelRetryCnt.add(0);
                    }
                }
            }
            
            for (int i = 0; i < listClient.size(); i++) {
                ClientBean client = listClient.get(i);
                mapClientIP.put(client.getIP(), i);
            }
            
            JCB_Contest.removeAllItems();
            JCB_Contest.addItem("All");
            int cnt = 0;
            for (Map.Entry entry : mapContest.entrySet()) {
                JCB_Contest.addItem(entry.getKey().toString());
                entry.setValue(cnt++);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        JA_Content = new javax.swing.JTextArea();
        JB_Send = new javax.swing.JButton();
        JF_RetryInterval = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        JCB_Type = new javax.swing.JComboBox();
        JCB_Mode = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        JCB_Contest = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        JA_Info = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        JF_NotificationID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        JF_RetryTimes = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("DHUOJ Notification Server");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        JA_Content.setColumns(20);
        JA_Content.setLineWrap(true);
        JA_Content.setRows(5);
        JA_Content.setWrapStyleWord(true);
        JA_Content.setFocusCycleRoot(true);
        JA_Content.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                JA_ContentFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(JA_Content);

        JB_Send.setText("Send");
        JB_Send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_SendActionPerformed(evt);
            }
        });

        JF_RetryInterval.setText("3");
        JF_RetryInterval.setToolTipText("the interval between retries");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Retry Interval");

        jLabel3.setText("Content");

        JCB_Type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NOTIFY", "LOGIN", "PASSWORD", "TEST", "EXIT" }));
        JCB_Type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                JCB_TypeItemStateChanged(evt);
            }
        });

        JCB_Mode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "255.255.255.255", "192.168.255.255", "192.168.0/1.255", "One by One" }));
        JCB_Mode.setSelectedIndex(3);

        jLabel4.setText("Mode");

        jLabel5.setText("Type");

        jLabel6.setText("Contest");

        JA_Info.setEditable(false);
        JA_Info.setBackground(java.awt.Color.lightGray);
        JA_Info.setColumns(20);
        JA_Info.setLineWrap(true);
        JA_Info.setRows(5);
        JA_Info.setWrapStyleWord(true);
        jScrollPane1.setViewportView(JA_Info);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Times");

        jButton1.setText("<html><center>Reload<br>\nClient<br>\nInfo</center></html>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        JF_NotificationID.setText("1");
        JF_NotificationID.setToolTipText("the interval between retries");

        jLabel8.setText("ID");

        JF_RetryTimes.setText("5");
        JF_RetryTimes.setToolTipText("the interval between retries");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(JB_Send, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JCB_Contest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JF_RetryInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JF_RetryTimes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(6, 6, 6)
                                .addComponent(JF_NotificationID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JCB_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JCB_Mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JCB_Mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(JCB_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8)
                            .addComponent(JF_NotificationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(JCB_Contest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(JF_RetryInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(JF_RetryTimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel3))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                .addGap(7, 7, 7)
                .addComponent(JB_Send)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JB_SendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_SendActionPerformed
        String type = JCB_Type.getSelectedItem().toString();
        String content = JA_Content.getText();  
        boolean flag = true;
        
        if (type.equals("NOTIFY") || type.equals("TEST")) {  // NOTIFY or TEST
            if (content.isEmpty()) {
                flag = false;
            }
        } else if (type.equals("LOGIN")) {  // LOGIN
            if (content.equals("{Server (e.g. 192.168.0.202) }") || content.isEmpty()) {
                flag = false;
            }
            JCB_Mode.setSelectedIndex(3);
        } else if (type.equals("PASSWORD") || type.equals("EXIT")) {  // PASSWORD or Exit
            if (content.equals("{Password}")) {
                flag = false;
            }
        }
        if (!flag) {
            JOptionPane.showMessageDialog(this, "Content should not be blank.");
            return;
        }
        
        if (threadReceive == null || !threadReceive.isAlive()) {
            RunReceive runReceive = new RunReceive(UI);
            threadReceive = new Thread(runReceive);
            threadReceive.start();
        }
        
        new Thread() {
            @Override
            public void run() {
                int notificationID = Integer.parseInt(JF_NotificationID.getText());
                int mode = JCB_Mode.getSelectedIndex();
                int retryInterval = Integer.parseInt(JF_RetryInterval.getText()) * 1000;
                int retryTimes = Integer.parseInt(JF_RetryTimes.getText());
                String type = JCB_Type.getSelectedItem().toString();
                String contestID = JCB_Contest.getSelectedItem().toString();
                String content = JA_Content.getText();
                
                if (notificationID-1 >= status.size()) {
                    for (int i = status.size(); i <= notificationID-1; i++) {
                        status.add(new ArrayList<Boolean>(modelStatus));
                        retryCnt.add(new ArrayList<Integer>(modelRetryCnt));
                    }
                }
                
                if (type.equals("NOTIFY") || type.equals("PASSWORD") || type.equals("EXIT")) {  // NOTIFY or PASSWORD or EXIT
                    content = contestID + "`|`" + content;  // Content: ContestID`|`Password
                }
                
                try {
                    if (mode == 0) {  // 255.255.255.255
                        RunSend runSend = new RunSend(UI, notificationID, type, content, "255.255.255.255");
                        Thread threadSend = new Thread(runSend);
                        threadSend.start();
                    } if (mode == 1) {  // 192.168.255.255
                        RunSend runSend = new RunSend(UI, notificationID, type, content, "192.168.255.255");
                        Thread threadSend = new Thread(runSend);
                        threadSend.start();
                    } else if (mode == 2) {  // 192.168.0/1.255
                        RunSend runSend = new RunSend(UI, notificationID, type, content, "192.168.0.255");
                        Thread threadSend = new Thread(runSend);
                        threadSend.start();
                        RunSend runSend2 = new RunSend(UI, notificationID, type, content, "192.168.1.255");
                        Thread threadSend2 = new Thread(runSend2);
                        threadSend2.start();
                    } else if (mode == 3) {  // One by One
                        int cnt = 0;
                        for (ClientBean client : listClient) {
                            if (contestID.equals("All") || client.getContestID() == Integer.parseInt(contestID)) {
                                String tmpContent = content;
                                if (type.equals("LOGIN")) {  // Content: UserID`|`Password`|`Server`|`ContestNo
                                    tmpContent = client.getUserID() + "`|`" + client.getPassword() + "`|`" + content + "`|`" + mapContest.get(String.valueOf(client.getContestID()));
                                }
                                RunSend runSend = new RunSend(UI, notificationID, type, tmpContent, client.getIP());
                                Thread threadSend = new Thread(runSend);
                                threadSend.start();
                                cnt++;
                                if (type.equals("LOGIN")) {
                                    Thread.sleep(150);
                                }
                            }
                        }
                        System.out.println(cnt + " notifications sent one by one.");
                    }
                    
                    JA_Info.setText(JA_Info.getText() + ">> #" + (notificationID) + ". [" + type + "] " + content + "\n");
                    JF_NotificationID.setText(String.valueOf(notificationID + 1));
                    JA_Content.setText("");
                    
                    int cnt;
                    do {
                        Thread.sleep(retryInterval);

                        cnt = 0;
                        for (int i = 0; i < listClient.size(); i++) {
                            ClientBean client = listClient.get(i);
                            if (contestID.equals("All") || client.getContestID() == Integer.parseInt(contestID)) {
                                if (status.get(notificationID-1).get(i).equals(Boolean.FALSE) && retryCnt.get(notificationID-1).get(i) < retryTimes) {
                                    String tmpContent = content;
                                    if (type.equals("LOGIN")) {  // Content: UserID`|`Password`|`Server`|`ContestNo
                                        tmpContent = client.getUserID() + "`|`" + client.getPassword() + "`|`" + content + "`|`" + mapContest.get(String.valueOf(client.getContestID()));
                                    }
                                    RunSend runSend = new RunSend(UI, notificationID, type, tmpContent, client.getIP());
                                    Thread threadSend = new Thread(runSend);
                                    threadSend.start();
                                    retryCnt.get(notificationID-1).set(i, retryCnt.get(notificationID-1).get(i) + 1);
                                    cnt++;
                                }
                            }
                        }
                        JA_Info.setText(JA_Info.getText() + ">> Resent " + cnt + " #" + (notificationID) + ". [" + type + "] " + content + "\n");
                        System.out.println(cnt + " notifications resent one by one.");
                    } while (cnt > 0);
                        
                    JA_Info.setText(JA_Info.getText() + ">> #" + (notificationID) + " all sent." + "\n");
                    
                } catch (NumberFormatException ex) {
                    Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
                }  
            }
        }.start();

    }//GEN-LAST:event_JB_SendActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int flag = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (flag == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void JCB_TypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_JCB_TypeItemStateChanged
        if (JCB_Type.getSelectedIndex() == 0) {  // NOTIFY
            JA_Content.setText("");  // Content: ContestID`|`Content
        } else if (JCB_Type.getSelectedIndex() == 1) {  // LOGIN
            JA_Content.setText("{Server (e.g. 192.168.0.202) }");  // Content: UserID`|`Password`|`Server`|`ContestNo
            JCB_Mode.setSelectedIndex(3);  // One by One
        } else if (JCB_Type.getSelectedIndex() == 2) {  // PASSWORD
            JA_Content.setText("{Password}");  // Content: ContestID`|`Password
        } else if (JCB_Type.getSelectedIndex() == 3) {  // TEST
            JA_Content.setText("");
        } else if (JCB_Type.getSelectedIndex() == 4) {  // EXIT
            JA_Content.setText("{Password}");  // Content: ContestID`|`Password
        }
    }//GEN-LAST:event_JCB_TypeItemStateChanged

    private void JA_ContentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JA_ContentFocusGained
        if (JA_Content.getText().startsWith("{") && JA_Content.getText().endsWith("}")) {
            JA_Content.setText("");
        }
    }//GEN-LAST:event_JA_ContentFocusGained

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadClients();
        JA_Info.setText(JA_Info.getText() + ">> Client info reloaded.\n");
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ServerUI().setVisible(true);
            }
        });

    }
    
    ServerUI UI = this;
    public static Thread threadReceive = null;
    public ArrayList<ClientBean> listClient = new ArrayList();
    private List<Boolean> modelStatus = Collections.synchronizedList(new ArrayList());
    private List<Integer> modelRetryCnt = Collections.synchronizedList(new ArrayList());
    public List< List<Boolean> > status = Collections.synchronizedList(new ArrayList());
    public List< List<Integer> > retryCnt = Collections.synchronizedList(new ArrayList());
    public Map<String, Integer> mapContest = new TreeMap<String, Integer>();
    public Map<String, Integer> mapClientIP = new HashMap<String, Integer>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea JA_Content;
    private javax.swing.JTextArea JA_Info;
    private javax.swing.JButton JB_Send;
    private javax.swing.JComboBox JCB_Contest;
    private javax.swing.JComboBox JCB_Mode;
    private javax.swing.JComboBox JCB_Type;
    public javax.swing.JTextField JF_NotificationID;
    public javax.swing.JTextField JF_RetryInterval;
    public javax.swing.JTextField JF_RetryTimes;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
